// controllers/clientController.js
const db = require('../config/db');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
exports.getAllClients = async (req, res) => {
    try {
        const [results] = await db.query('SELECT * FROM –ö–ª–∏–µ–Ω—Ç—ã');
        res.json(results);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
exports.getClientById = async (req, res) => {
    try {
        const id = req.params.id;
        const [result] = await db.query('SELECT * FROM –ö–ª–∏–µ–Ω—Ç—ã WHERE id_client = ?', [id]);
        if (result.length === 0) {
            return res.status(404).json({ message: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        res.json(result[0]);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
exports.createClient = async (req, res) => {
    try {
        const { full_name, phone, email, address } = req.body;
        console.log('üì§ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', req.body); // <--- –î–û–ë–ê–í–õ–ï–ù–û

        const [result] = await db.query(
            'INSERT INTO –ö–ª–∏–µ–Ω—Ç—ã (full_name, phone, email, address) VALUES (?, ?, ?, ?)',
            [full_name, phone, email, address]
        );
        res.status(201).json({ message: '–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω', id: result.insertId });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', err); // <--- –î–û–ë–ê–í–õ–ï–ù–û
        res.status(500).json({ error: err.message });
    }
};

// –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
exports.updateClient = async (req, res) => {
    try {
        const id = req.params.id;
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', req.body);
        const { full_name, phone, email, address } = req.body;
        await db.query(
            'UPDATE –ö–ª–∏–µ–Ω—Ç—ã SET full_name = ?, phone = ?, email = ?, address = ? WHERE id_client = ?',
            [full_name, phone, email, address, id]
        );
        res.json({ message: '–ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
exports.deleteClient = async (req, res) => {
    try {
        const id = req.params.id;
        console.log('–£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å id:', id);
        await db.query('DELETE FROM –ö–ª–∏–µ–Ω—Ç—ã WHERE id_client = ?', [id]);
        res.json({ message: '–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.getAllCars = async (req, res) => {
    try {
        console.log('–ó–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏');
        const [cars] = await db.query('SELECT * FROM –ê–∞–≤—Ç–æ–º–æ–±–∏–ª–∏');
        res.json(cars);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err });
    }
};